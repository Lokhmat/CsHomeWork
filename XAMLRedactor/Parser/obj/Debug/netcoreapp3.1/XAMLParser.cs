//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Work\C#HW\XAMLRedactor\Parser\XAMLParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ParserLib {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class XAMLParser : Parser {
	public const int
		COMMENT=1, CDATA=2, DTD=3, EntityRef=4, CharRef=5, SEA_WS=6, OPEN=7, XMLDeclOpen=8, 
		TEXT=9, CLOSE=10, SPECIAL_CLOSE=11, SLASH_CLOSE=12, SLASH=13, EQUALS=14, 
		STRING=15, Name=16, S=17, PI=18;
	public const int
		RULE_document = 0, RULE_prolog = 1, RULE_content = 2, RULE_element = 3, 
		RULE_reference = 4, RULE_attribute = 5, RULE_chardata = 6, RULE_misc = 7;
	public static readonly string[] ruleNames = {
		"document", "prolog", "content", "element", "reference", "attribute", 
		"chardata", "misc"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'<'", null, null, "'>'", null, 
		"'/>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "CDATA", "DTD", "EntityRef", "CharRef", "SEA_WS", "OPEN", 
		"XMLDeclOpen", "TEXT", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", "SLASH", 
		"EQUALS", "STRING", "Name", "S", "PI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XAMLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XAMLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public PrologContext prolog() {
			return GetRuleContext<PrologContext>(0);
		}
		public MiscContext[] misc() {
			return GetRuleContexts<MiscContext>();
		}
		public MiscContext misc(int i) {
			return GetRuleContext<MiscContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXAMLParserVisitor<TResult> typedVisitor = visitor as IXAMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==XMLDeclOpen) {
				{
				State = 16; prolog();
				}
			}

			State = 22;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT) | (1L << SEA_WS) | (1L << PI))) != 0)) {
				{
				{
				State = 19; misc();
				}
				}
				State = 24;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 25; element();
			State = 29;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT) | (1L << SEA_WS) | (1L << PI))) != 0)) {
				{
				{
				State = 26; misc();
				}
				}
				State = 31;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologContext : ParserRuleContext {
		public ITerminalNode XMLDeclOpen() { return GetToken(XAMLParser.XMLDeclOpen, 0); }
		public ITerminalNode SPECIAL_CLOSE() { return GetToken(XAMLParser.SPECIAL_CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public PrologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prolog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.EnterProlog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.ExitProlog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXAMLParserVisitor<TResult> typedVisitor = visitor as IXAMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProlog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrologContext prolog() {
		PrologContext _localctx = new PrologContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_prolog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(XMLDeclOpen);
			State = 36;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Name) {
				{
				{
				State = 33; attribute();
				}
				}
				State = 38;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 39; Match(SPECIAL_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		public ChardataContext[] chardata() {
			return GetRuleContexts<ChardataContext>();
		}
		public ChardataContext chardata(int i) {
			return GetRuleContext<ChardataContext>(i);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		public ITerminalNode[] CDATA() { return GetTokens(XAMLParser.CDATA); }
		public ITerminalNode CDATA(int i) {
			return GetToken(XAMLParser.CDATA, i);
		}
		public ITerminalNode[] PI() { return GetTokens(XAMLParser.PI); }
		public ITerminalNode PI(int i) {
			return GetToken(XAMLParser.PI, i);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(XAMLParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(XAMLParser.COMMENT, i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXAMLParserVisitor<TResult> typedVisitor = visitor as IXAMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_content);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEA_WS || _la==TEXT) {
				{
				State = 41; chardata();
				}
			}

			State = 56;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 49;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case OPEN:
						{
						State = 44; element();
						}
						break;
					case EntityRef:
					case CharRef:
						{
						State = 45; reference();
						}
						break;
					case CDATA:
						{
						State = 46; Match(CDATA);
						}
						break;
					case PI:
						{
						State = 47; Match(PI);
						}
						break;
					case COMMENT:
						{
						State = 48; Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 52;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SEA_WS || _la==TEXT) {
						{
						State = 51; chardata();
						}
					}

					}
					} 
				}
				State = 58;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode[] Name() { return GetTokens(XAMLParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(XAMLParser.Name, i);
		}
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXAMLParserVisitor<TResult> typedVisitor = visitor as IXAMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_element);
		int _la;
		try {
			State = 83;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; Match(OPEN);
				State = 60; Match(Name);
				State = 64;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Name) {
					{
					{
					State = 61; attribute();
					}
					}
					State = 66;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 67; Match(CLOSE);
				State = 68; content();
				State = 69; Match(OPEN);
				State = 70; Match(SLASH);
				State = 71; Match(Name);
				State = 72; Match(CLOSE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; Match(OPEN);
				State = 75; Match(Name);
				State = 79;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Name) {
					{
					{
					State = 76; attribute();
					}
					}
					State = 81;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 82; Match(SLASH_CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		public ITerminalNode EntityRef() { return GetToken(XAMLParser.EntityRef, 0); }
		public ITerminalNode CharRef() { return GetToken(XAMLParser.CharRef, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXAMLParserVisitor<TResult> typedVisitor = visitor as IXAMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_la = _input.La(1);
			if ( !(_la==EntityRef || _la==CharRef) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(XAMLParser.Name, 0); }
		public ITerminalNode STRING() { return GetToken(XAMLParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXAMLParserVisitor<TResult> typedVisitor = visitor as IXAMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(Name);
			State = 88; Match(EQUALS);
			State = 89; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChardataContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(XAMLParser.TEXT, 0); }
		public ITerminalNode SEA_WS() { return GetToken(XAMLParser.SEA_WS, 0); }
		public ChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chardata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.EnterChardata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.ExitChardata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXAMLParserVisitor<TResult> typedVisitor = visitor as IXAMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChardata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChardataContext chardata() {
		ChardataContext _localctx = new ChardataContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_chardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_la = _input.La(1);
			if ( !(_la==SEA_WS || _la==TEXT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiscContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(XAMLParser.COMMENT, 0); }
		public ITerminalNode PI() { return GetToken(XAMLParser.PI, 0); }
		public ITerminalNode SEA_WS() { return GetToken(XAMLParser.SEA_WS, 0); }
		public MiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_misc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.EnterMisc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXAMLParserListener typedListener = listener as IXAMLParserListener;
			if (typedListener != null) typedListener.ExitMisc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXAMLParserVisitor<TResult> typedVisitor = visitor as IXAMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMisc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MiscContext misc() {
		MiscContext _localctx = new MiscContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_misc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT) | (1L << SEA_WS) | (1L << PI))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x14\x62\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x3\x2\x5\x2\x14\n\x2\x3\x2\a\x2\x17\n\x2\f\x2\xE\x2\x1A\v\x2\x3\x2"+
		"\x3\x2\a\x2\x1E\n\x2\f\x2\xE\x2!\v\x2\x3\x3\x3\x3\a\x3%\n\x3\f\x3\xE\x3"+
		"(\v\x3\x3\x3\x3\x3\x3\x4\x5\x4-\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5"+
		"\x4\x34\n\x4\x3\x4\x5\x4\x37\n\x4\a\x4\x39\n\x4\f\x4\xE\x4<\v\x4\x3\x5"+
		"\x3\x5\x3\x5\a\x5\x41\n\x5\f\x5\xE\x5\x44\v\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5P\n\x5\f\x5\xE\x5S\v\x5\x3\x5"+
		"\x5\x5V\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t"+
		"\x2\x2\x2\n\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x2\x5\x3\x2"+
		"\x6\a\x4\x2\b\b\v\v\x5\x2\x3\x3\b\b\x14\x14g\x2\x13\x3\x2\x2\x2\x4\"\x3"+
		"\x2\x2\x2\x6,\x3\x2\x2\x2\bU\x3\x2\x2\x2\nW\x3\x2\x2\x2\fY\x3\x2\x2\x2"+
		"\xE]\x3\x2\x2\x2\x10_\x3\x2\x2\x2\x12\x14\x5\x4\x3\x2\x13\x12\x3\x2\x2"+
		"\x2\x13\x14\x3\x2\x2\x2\x14\x18\x3\x2\x2\x2\x15\x17\x5\x10\t\x2\x16\x15"+
		"\x3\x2\x2\x2\x17\x1A\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x18\x19\x3\x2\x2"+
		"\x2\x19\x1B\x3\x2\x2\x2\x1A\x18\x3\x2\x2\x2\x1B\x1F\x5\b\x5\x2\x1C\x1E"+
		"\x5\x10\t\x2\x1D\x1C\x3\x2\x2\x2\x1E!\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2"+
		"\x1F \x3\x2\x2\x2 \x3\x3\x2\x2\x2!\x1F\x3\x2\x2\x2\"&\a\n\x2\x2#%\x5\f"+
		"\a\x2$#\x3\x2\x2\x2%(\x3\x2\x2\x2&$\x3\x2\x2\x2&\'\x3\x2\x2\x2\')\x3\x2"+
		"\x2\x2(&\x3\x2\x2\x2)*\a\r\x2\x2*\x5\x3\x2\x2\x2+-\x5\xE\b\x2,+\x3\x2"+
		"\x2\x2,-\x3\x2\x2\x2-:\x3\x2\x2\x2.\x34\x5\b\x5\x2/\x34\x5\n\x6\x2\x30"+
		"\x34\a\x4\x2\x2\x31\x34\a\x14\x2\x2\x32\x34\a\x3\x2\x2\x33.\x3\x2\x2\x2"+
		"\x33/\x3\x2\x2\x2\x33\x30\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x32\x3\x2"+
		"\x2\x2\x34\x36\x3\x2\x2\x2\x35\x37\x5\xE\b\x2\x36\x35\x3\x2\x2\x2\x36"+
		"\x37\x3\x2\x2\x2\x37\x39\x3\x2\x2\x2\x38\x33\x3\x2\x2\x2\x39<\x3\x2\x2"+
		"\x2:\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;\a\x3\x2\x2\x2<:\x3\x2\x2\x2=>\a\t"+
		"\x2\x2>\x42\a\x12\x2\x2?\x41\x5\f\a\x2@?\x3\x2\x2\x2\x41\x44\x3\x2\x2"+
		"\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x45\x3\x2\x2\x2\x44\x42\x3"+
		"\x2\x2\x2\x45\x46\a\f\x2\x2\x46G\x5\x6\x4\x2GH\a\t\x2\x2HI\a\xF\x2\x2"+
		"IJ\a\x12\x2\x2JK\a\f\x2\x2KV\x3\x2\x2\x2LM\a\t\x2\x2MQ\a\x12\x2\x2NP\x5"+
		"\f\a\x2ON\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2RT\x3\x2"+
		"\x2\x2SQ\x3\x2\x2\x2TV\a\xE\x2\x2U=\x3\x2\x2\x2UL\x3\x2\x2\x2V\t\x3\x2"+
		"\x2\x2WX\t\x2\x2\x2X\v\x3\x2\x2\x2YZ\a\x12\x2\x2Z[\a\x10\x2\x2[\\\a\x11"+
		"\x2\x2\\\r\x3\x2\x2\x2]^\t\x3\x2\x2^\xF\x3\x2\x2\x2_`\t\x4\x2\x2`\x11"+
		"\x3\x2\x2\x2\r\x13\x18\x1F&,\x33\x36:\x42QU";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ParserLib
